/***************************************************************************
    copyright            : (C) 2010 by Michael Margraf
    email                : michael.margraf@alumni.tu-berlin.de
 ***************************************************************************/

#include "mutualx.h"


MutualN::MutualN()
{
  Description = QObject::tr("several mutual inductors");

  Model = "MUTn";
  Name  = "Tr";

  // must be the first property!
  Props.append(new Property("coils", "4", false,
		QObject::tr("number of mutual inductances")));

  Props.append(new Property("L", "0", false, " "));

  createSymbol(0);
}

// --------------------------------------------------------
Element* MutualN::info(QString& Name, QByteArray *bitmap, bool getNewOne)
{
  Name = QObject::tr("n Mutual Inductors");
  bitmap->setRawData(MutualN::component_icon, sizeof(MutualN::component_icon));

  if(getNewOne)
    return new MutualN();
  return 0;
}

// --------------------------------------------------------
void MutualN::createSymbol(Schematic*)
{
  // adjust port number
  int Num = Props.first()->Value.toInt();
  if(Num < 1)
    Num = 1;
  else if(Num > 8)
    Num = 8;
  Props.first()->Value = QString::number(Num);

  // adjust property number
  int i, j, NumProps;
  j = Props.count();
  NumProps = Num + Num * (Num - 1) / 2 + 1;
  for(i = j; i < NumProps; i++)
    Props.append(new Property("L", "0", false, " "));
  for(i = NumProps; i < j; i++)
    Props.removeLast();

  // set property names and descriptions
  Property *pp = Props.first();
  for(i = 1; i <= Num; i++) {
    pp = Props.next();
    pp->Name = "L" + QString::number(i);
    pp->Description =
        QObject::tr("inductance of coil") + " " + QString::number(i);
  }
  for(i = 1; i < Num; i++)
    for(j = i+1; j <= Num; j++) {
      pp = Props.next();
      pp->Name = "k" + QString::number(i) + QString::number(j);
      pp->Description =
          QObject::tr("coupling factor between coil %1 and coil %2").arg(i).arg(j);
    }

  // draw symbol
  int x = -10 * (Num-1);
  Texts.append(new Text(x-9,-22,"1"));

  x1 = x-6;  y1 = -30;
  x2 = 10-x; y2 =  30;

  tx = x2+4;
  ty = y1+4;

  x -= 6;
  for(i=0; i<Num; i++) {
    Arcs.append(new Arc(x,-18,12,12, 16*270,16*180, QPen(Qt::darkBlue,2)));
    Arcs.append(new Arc(x, -6,12,12, 16*270,16*180, QPen(Qt::darkBlue,2)));
    Arcs.append(new Arc(x,  6,12,12, 16*270,16*180, QPen(Qt::darkBlue,2)));

	x += 6;
    Lines.append(new Line(x,-18,x,-30,QPen(Qt::darkBlue,2)));
    Lines.append(new Line(x, 18,x, 30,QPen(Qt::darkBlue,2)));

    Ports.append(new Port(x,-30));
    Ports.append(new Port(x, 30));
	x += 14;
  }
}

// -------------------------------------------------------------------
// picture of component in PNG format
char MutualN::component_icon[230] = {
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
	0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
	0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7A, 0x7A, 0xF4, 0x00, 0x00, 0x00,
	0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00,
	0x00, 0x06, 0x62, 0x4B, 0x47, 0x44, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
	0xA0, 0xBD, 0xA7, 0x93, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73,
	0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C,
	0x18, 0x00, 0x00, 0x00, 0x79, 0x49, 0x44, 0x41, 0x54, 0x58, 0xC3, 0xED,
	0x97, 0xC1, 0x0A, 0xC0, 0x20, 0x0C, 0x43, 0x8D, 0xF8, 0xFF, 0xBF, 0x9C,
	0x9D, 0x06, 0x43, 0x8D, 0x27, 0x6B, 0x85, 0xA5, 0xD7, 0x57, 0xA5, 0x34,
	0xA9, 0x58, 0x90, 0x2C, 0x99, 0x51, 0x4B, 0x72, 0xB8, 0x80, 0x8B, 0x0B,
	0x00, 0x78, 0x82, 0x55, 0x99, 0x48, 0x62, 0x7A, 0xD9, 0x66, 0x06, 0x39,
	0x86, 0xEF, 0x81, 0x60, 0x26, 0x25, 0xC0, 0x42, 0xB7, 0x9D, 0x2C, 0xDD,
	0x84, 0x6D, 0xEC, 0x92, 0x36, 0x51, 0x04, 0x6B, 0x7D, 0x22, 0x85, 0x7E,
	0x11, 0xCC, 0x0F, 0xD1, 0x74, 0x0C, 0xBF, 0x7A, 0xF5, 0xAD, 0x8B, 0x60,
	0xF6, 0x80, 0x3D, 0x60, 0x0F, 0xD8, 0x03, 0x43, 0x07, 0x48, 0x42, 0x69,
	0x16, 0xC1, 0xEE, 0xF5, 0xC0, 0x6A, 0x5D, 0xD9, 0xC9, 0xFC, 0x27, 0x84,
	0x77, 0xC3, 0xDF, 0x17, 0xF0, 0x00, 0x25, 0x98, 0xD1, 0x31, 0x1D, 0x76,
	0x38, 0xD6, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42,
	0x60, 0x82
};
